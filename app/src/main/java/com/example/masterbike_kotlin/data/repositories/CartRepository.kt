package com.example.masterbike_kotlin.data.repositories

import com.example.masterbike_kotlin.data.api.SupabaseClient
import com.example.masterbike_kotlin.data.models.CartItem
import io.github.jan.supabase.postgrest.postgrest

class CartRepository {

    suspend fun getCartItems(userId: String): List<CartItem> {
        return SupabaseClient.client.postgrest["cart_items"]
            .select {
                filter {
                    eq("user_id", userId)
                }
            }
            .decodeList<CartItem>()
    }

    suspend fun addToCart(userId: String, productId: String, quantity: Int = 1): Result<CartItem> {
        return try {
            // First check if item already exists
            val existingItem = SupabaseClient.client.postgrest["cart_items"]
                .select {
                    filter {
                        eq("user_id", userId)
                        eq("product_id", productId)
                    }
                }
                .decodeSingleOrNull<CartItem>()

            if (existingItem != null) {
                // Update quantity
                val updatedItem = existingItem.copy(quantity = existingItem.quantity + quantity)
                SupabaseClient.client.postgrest["cart_items"]
                    .update(updatedItem) {
                        filter {
                            eq("id", existingItem.id)
                        }
                    }
                Result.success(updatedItem)
            } else {
                // Create new item
                val cartItem = CartItem(
                    id = "", // Will be generated by Supabase
                    userId = userId,
                    productId = productId,
                    quantity = quantity,
                    createdAt = "" // Will be set by Supabase
                )
                val result = SupabaseClient.client.postgrest["cart_items"]
                    .insert(cartItem)
                    .decodeSingle<CartItem>()
                Result.success(result)
            }
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    suspend fun updateCartItemQuantity(cartItemId: String, quantity: Int): Result<Unit> {
        return try {
            SupabaseClient.client.postgrest["cart_items"]
                .update(mapOf("quantity" to quantity)) {
                    filter {
                        eq("id", cartItemId)
                    }
                }
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    suspend fun removeFromCart(cartItemId: String): Result<Unit> {
        return try {
            SupabaseClient.client.postgrest["cart_items"]
                .delete {
                    filter {
                        eq("id", cartItemId)
                    }
                }
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    suspend fun clearCart(userId: String): Result<Unit> {
        return try {
            SupabaseClient.client.postgrest["cart_items"]
                .delete {
                    filter {
                        eq("user_id", userId)
                    }
                }
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}